name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              bun install
              bun run build
              strip -x *.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              bun install
              bun run build
              strip -x *.node
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: |
              bun install
              bun run build
          - host: windows-latest
            target: i686-pc-windows-msvc
            build: |
              rustup target add i686-pc-windows-msvc
              bun install
              bun run build --target i686-pc-windows-msvc
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: |
              rustup target add aarch64-pc-windows-msvc
              bun install
              bun run build --target aarch64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: >-
              set -e &&
              npm install -g bun &&
              bun install &&
              bun run build --target x86_64-unknown-linux-gnu &&
              strip *.node
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: >-
              set -e &&
              rustup target add x86_64-unknown-linux-musl &&
              apk add --no-cache musl-dev &&
              npm install -g bun &&
              bun install &&
              bun run build --target x86_64-unknown-linux-musl &&
              strip *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: >-
              set -e &&
              npm install -g bun &&
              bun install &&
              bun run build --target aarch64-unknown-linux-gnu &&
              aarch64-unknown-linux-gnu-strip *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: >-
              set -e &&
              rustup target add aarch64-unknown-linux-musl &&
              apk add --no-cache musl-dev &&
              npm install -g bun &&
              bun install &&
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-musl-gcc &&
              bun run build --target aarch64-unknown-linux-musl &&
              llvm-strip *.node
    name: Build - ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        if: ${{ !matrix.settings.docker }}
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Setup Rust
        if: ${{ !matrix.settings.docker }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.settings.target }}
          override: true
      
      - name: Build in Docker
        if: ${{ matrix.settings.docker }}
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace ${{ matrix.settings.docker }} bash -c "${{ matrix.settings.build }}"
      
      - name: Build
        if: ${{ !matrix.settings.docker }}
        shell: bash
        run: ${{ matrix.settings.build }}
      
      - name: List built files
        shell: bash
        run: ls -la *.node || echo "No .node files found"
      
      - name: Rename binaries to match target names
        shell: bash
        run: |
          # Find the generated .node file
          for f in *.node; do
            if [ -f "$f" ]; then
              # Rename to match our target naming convention
              mv "$f" "flexbuffers-js.${{ matrix.settings.target }}.node"
              echo "Renamed $f to flexbuffers-js.${{ matrix.settings.target }}.node"
            fi
          done
          ls -la *.node
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            flexbuffers-js.${{ matrix.settings.target }}.node
            index.js
            index.d.ts
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Prepare release assets
        run: |
          # List all artifacts for debugging
          echo "=== Listing all artifacts ==="
          find artifacts -name "*.node" -type f
          
          # Copy all .node files to root
          find artifacts -name "*.node" -type f -exec cp {} . \;
          
          # Copy JS files from any artifact that has them
          find artifacts -name "index.js" -type f -exec cp {} . \; || true
          find artifacts -name "index.d.ts" -type f -exec cp {} . \; || true
          
          # List files to be released
          echo "=== Files to be released ==="
          ls -la *.node index.js index.d.ts || true
      
      - name: Create Release with Assets
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          files: |
            flexbuffers-js.*.node
            index.js
            index.d.ts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}